/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.41
 * Generated at: 2025-06-03 13:16:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import jakarta.servlet.http.HttpSession;

public final class play_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("jakarta.servlet.http.HttpSession");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    ");

response.setHeader("Cache-Control", "no-cache, no-store, must-revalidate");
response.setHeader("Pragma", "no-cache");
response.setDateHeader("Expires", 0);

if (session.getAttribute("user") == null) {
    response.sendRedirect("Login.jsp");
}

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("form\r\n");
      out.write("{\r\n");
      out.write(" border: 1px solid;\r\n");
      out.write(" max-width: 500px;\r\n");
      out.write(" margin: 30px auto;\r\n");
      out.write(" text-align: center;\r\n");
      out.write(" background-color: white;\r\n");
      out.write(" height: 450px;\r\n");
      out.write(" margin-top:200px; \r\n");
      out.write(" font-family: sans-serif;\r\n");
      out.write(" padding: 10px;\r\n");
      out.write(" border-radius: 10px;\r\n");
      out.write("}\r\n");
      out.write("body {\r\n");
      out.write("    background-color: #e3f2fd; /* Light blue */\r\n");
      out.write("}\r\n");
      out.write("p\r\n");
      out.write("{\r\n");
      out.write("color: #424242\r\n");
      out.write("}\r\n");
      out.write(".l\r\n");
      out.write("{\r\n");
      out.write("font-size: 20px;\r\n");
      out.write("margin-top: 30px;\r\n");
      out.write("display: block;\r\n");
      out.write("}\r\n");
      out.write(".i\r\n");
      out.write("{\r\n");
      out.write("width: 50%;\r\n");
      out.write("padding: 10px;\r\n");
      out.write("margin-top: 10px;\r\n");
      out.write("font-size: 16px;\r\n");
      out.write("border: 1px solid;\r\n");
      out.write("border-radius: 10px;\r\n");
      out.write("}\r\n");
      out.write("#s\r\n");
      out.write("{\r\n");
      out.write("padding: 10px;\r\n");
      out.write("font-size: 16px;\r\n");
      out.write("width: 50%;\r\n");
      out.write("margin-top: 10px;\r\n");
      out.write("border: 1px solid;\r\n");
      out.write("border-radius: 10px;\r\n");
      out.write("background-color: #2e7d32;\r\n");
      out.write("cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<form action=\"LogicServlet\" method=\"post\">\r\n");
      out.write("\r\n");
      out.write("<h1 style=\"color: #e65100\">Guess the Number from 1 to 100</h1>\r\n");
      out.write("<p>You have 10 chances to guess a number between 1 and 100. <br>\r\n");
      out.write("    After each guess, you will get a hint:<br>\r\n");
      out.write("    <strong>\"Too High\"</strong> or <strong>\"Too Low\"</strong>.<br>\r\n");
      out.write("    Try to guess the number in the fewest attempts!</p>\r\n");
      out.write("    <label for=\"guss\" class=\"l\">Guess The Number</label>\r\n");
      out.write("    <input type=\"number\" id=\"guss\" class=\"i\" name=\"guessnumber\" min=\"1\" max=\"100\" required>\r\n");
      out.write("    <br>\r\n");
      out.write("    <input type=\"submit\" id=\"s\" value=\"Submit\" >\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
